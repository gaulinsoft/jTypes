/*! ------------------------------------------------------------------------
//                                   jTypes
//  ------------------------------------------------------------------------
//
//                   Copyright 2014 Gaulinsoft Corporation
//
//       Licensed under the Apache License, Version 2.0 (the "License");
//      you may not use this file except in compliance with the License.
//                   You may obtain a copy of the License at
//
//                 http://www.apache.org/licenses/LICENSE-2.0
//
//     Unless required by applicable law or agreed to in writing, software
//      distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//     See the License for the specific language governing permissions and
//                       limitations under the License.
*/

// ########## LANGUAGE ##########

// Create the language constants
var $_lang_abstract_accessor           = '"{0}" cannot be accessed because it is an abstract property.',
    $_lang_abstract_auto               = '"{0}" cannot have the abstract modifier because it is an automatically implemented property.',
    $_lang_abstract_call               = '"{0}" cannot be called because it is an abstract method.',
    $_lang_abstract_class              = '"{0}" cannot have the abstract modifier in a non-abstract class.',
    $_lang_access_duplicate            = '"{0}" cannot have more than one access modifier.',
    $_lang_access_invalid              = '"{0}" cannot have the private, protected, or public modifiers because it is a {1} definition.',
    $_lang_auto_invalid                = '"{0}" must have both accessors because it is an automatically implemented property.',
    $_lang_auto_invalid_default        = '"{0}" cannot have more than one default value for the automatically implemented property.',
    $_lang_auto_invalid_type           = '"{0}" must have primitive strings for accessors.',
    $_lang_class_abstract_instance     = 'abstract classes cannot be instantiated.',
    $_lang_class_abstract_override     = '{0} must implement the inherited abstract {2} "{1}" with the override modifier.',
    $_lang_class_base_conflict         = 'class cannot have an ambiguous base class "{0}".',
    $_lang_class_base_invalid          = '"{0}" is not a valid base class reference.',
    $_lang_class_base_resolve          = 'class cannot have an uncompiled base class "{0}".',
    $_lang_class_conflict              = '{0} cannot have the {1} modifier.',
    $_lang_class_conflict_abstract     = 'abstract {0} cannot have the {1} modifier.',
    $_lang_class_conflict_and          = '{0} cannot have the {1} and {2} modifiers.',
    $_lang_class_conflict_expando      = '{0} cannot have expando instances.',
    $_lang_class_failed_instance       = 'uncompiled classes cannot be instantiated.',
    $_lang_class_global_invalid        = '{0} cannot hide the existing {1} "{2}".',
    $_lang_class_inherit_conflict      = '{0} cannot inherit from {1}.',
    $_lang_class_inherit_expando       = '{0} must have the expando modifier to inherit from an expando {0}.',
    $_lang_class_inherit_internal      = '{0} must have the internal modifier to inherit from an internal {0}.',
    $_lang_class_inherit_invalid       = '{0} cannot have inheritance.',
    $_lang_class_inherit_locked        = '{0} must inherit from an unlocked {0} to have the unlocked modifier.',
    $_lang_class_inherit_nonexpando    = '{0} must inherit from an expando {0} to have the expando modifier.',
    $_lang_class_inherit_nonprimitive  = '{0} must inherit from a primitive {0} to have the primitive modifier.',
    $_lang_class_inherit_sealed        = '{0} cannot inherit from a sealed {1}.',
    $_lang_class_inherit_unlocked      = '{0} must have the unlocked modifier to inherit from an unlocked {0}.',
    $_lang_class_inherit_unoptimized   = '{0} must inherit from an optimized {0} to have the optimized modifier.',
    $_lang_class_keyword_duplicate     = 'class cannot have a duplicate {0} modifier.',
    $_lang_class_keyword_invalid       = '"{0}" is not a valid class modifier.',
    $_lang_class_name_invalid          = '"{0}" is not a valid class name.',
    $_lang_class_new                   = 'classes cannot be compiled using the new operator.',
    $_lang_conflict_and                = '"{0}" cannot have the {1} and {2} modifiers.',
    $_lang_conflict_constraint         = '"{0}" must be a field or automatically implemented property to have the "{1}" type constraint.',
    $_lang_conflict_generic            = '"{0}" is not generic and must be accessed on an instance.',
    $_lang_conflict_modifier           = '"{0}" cannot have the {1} modifier in a {2}.',
    $_lang_constraint_class            = '"{0}" cannot have a type constraint because it is a class definition.',
    $_lang_constraint_const            = '"{0}" cannot have a type constraint with the const modifier.',
    $_lang_constraint_primitive        = '"{0}" must have a primitive type constraint in a primitive {1}.',
    $_lang_exception_arguments         = '"{0}({1})" has some invalid arguments.',
    $_lang_exception_compatibility     = 'JavaScript engine does not support ECMAScript 5.',
    $_lang_exception_generic           = 'Compiler Errors:',
    $_lang_exception_suffix            = '[jTypes]',
    $_lang_exception_suffix_handle     = '[jTypes.{0}]',
    $_lang_filter_invalid              = '"{0}" has an invalid type constraint "{1}".',
    $_lang_filter_invalid_generic      = '"{1}" is not a valid type constraint.',
    $_lang_filter_primitive            = '"{0}" cannot have a non-primitive type constraint "{1}" in a primitive {2}.',
    $_lang_filter_value                = '"{0}" must have a value of the type {1}.',
    $_lang_handle_alias_conflict       = 'namespace "{0}" contains a definition conflicting with alias "{1}".',
    $_lang_handle_alias_invalid        = 'namespace "{0}" contains an invalid class alias "{1}".',
    $_lang_handle_dependency_invalid   = 'namespace "{0}" contains an invalid class dependency "{1}".',
    $_lang_handle_include_duplicate    = '"{0}" is an ambiguous reference between "{1}.{0}" and "{2}.{0}".',
    $_lang_handle_qualifier_invalid    = 'namespace "{0}" does not have the "{1}" alias.',
    $_lang_keyword_duplicate           = '"{0}" cannot have a duplicate {1} modifier.',
    $_lang_keyword_invalid             = '"{0}" has an invalid modifier "{1}".',
    $_lang_name_duplicate              = '"{0}" cannot have more than one {1}definition.',
    $_lang_name_invalid                = '"{0}" is not a valid name.',
    $_lang_name_reserved               = '"{0}" is a reserved name.',
    $_lang_namespace_alias_duplicate   = 'namespace already has an alias "{0}".',
    $_lang_namespace_alias_invalid     = 'namespace has an invalid alias "{0}".',
    $_lang_namespace_dependency_type   = 'namespace must have primitive string directives.',
    $_lang_namespace_include_invalid   = 'namespace has an invalid include "{0}".',
    $_lang_namespace_invalid           = '"{0}" is not a valid namespace.',
    $_lang_namespace_subnamespace      = 'namespace "{0}" cannot be compiled within another namespace.',
    $_lang_new_invalid                 = '"{0}" must hide an inherited {1}definition to have the new modifier.',
    $_lang_new_required                = '"{0}" cannot hide an inherited {1}definition without the new modifier.',
    $_lang_override_constraint         = '"{0}" must have the "{1}" type constraint to override.',
    $_lang_override_invalid            = '"{0}" has no suitable {1} to override.',
    $_lang_override_required           = '"{0}" must implement the inherited abstract {1} with the override modifier.',
    $_lang_property_access_accessor    = '"{0}" must have both accessors to have an access modifier on the {1} accessor.',
    $_lang_property_access_conflict    = '"{0}" cannot have the {2} modifier on the {1} accessor in a {3}.',
    $_lang_property_access_duplicate   = '"{0}" cannot have access modifiers on both accessors.',
    $_lang_property_access_invalid     = '"{0}" has an invalid access modifier "{2}" on the {1} accessor.',
    $_lang_property_access_restrictive = '"{0}" must have a more restrictive access modifier on the {1} accessor.',
    $_lang_property_name_duplicate     = '"{0}" cannot have more than one definition for the {1} accessor.',
    $_lang_property_name_empty         = '"{0}" must have at least one property accessor.',
    $_lang_property_name_invalid       = '"{0}" cannot have a "{1}" property accessor.',
    $_lang_property_override_accessor  = '"{0}" must override both accessors of the inherited abstract property.',
    $_lang_property_override_invalid   = '"{0}" has no suitable {1} accessor to override.',
    $_lang_property_private_abstract   = '"{0}" cannot have a private {1} accessor because it is abstract.',
    $_lang_property_private_override   = '"{0}" cannot override a private {1} accessor.',
    $_lang_property_readonly_invalid   = '"{0}" must have both accessors to have the readonly modifier.',
    $_lang_property_value_abstract     = '"{0}" must have a either a null or undefined reference or a function for the {1} accessor.',
    $_lang_property_value_function     = '"{0}" must have a function for the {1} accessor.',
    $_lang_readonly_data               = '"{0}" cannot be set because it is a read-only {1}.',
    $_lang_readonly_invalid            = '"{0}" cannot have the readonly modifier because it is a {1} definition.',
    $_lang_readonly_invalid_type       = '"{0}" must be a field or property to have the readonly modifier.',
    $_lang_requires                    = '"{0}" cannot have the {1} modifier without the {2} modifier.',
    $_lang_requires_or                 = '"{0}" cannot have the {1} modifier without the {2} or {3} modifiers.',
    $_lang_virtual_invalid             = '"{0}" cannot have the abstract, virtual, or override modifiers because it is a {1} definition.',
    $_lang_virtual_invalid_type        = '"{0}" must be a method or property to have the abstract, virtual, or override modifiers.',
    $_lang_virtual_sealed              = '"{0}" cannot have the virtual modifier in a sealed {1}.';